#
# Default Bacula Director Configuration file
#
#  The only thing that MUST be changed is to add one or more
#   file or directory names in the Include directive of the
#   FileSet resource.
#
#  For Bacula release 5.2.13 (19 February 2013) -- unknown unknown
#
#  You might also want to change the default email address
#   from root to your address.  See the "mail" and "operator"
#   directives in the Messages resource.
#

Director {                            # define myself
  Name = bacula-dir
  DIRport = 9101                # where we listen for UA connections
  QueryFile = "/etc/bacula/query.sql"
  WorkingDirectory = "/var/spool/bacula"
  PidDirectory = "/var/run"
  Maximum Concurrent Jobs = 1
  Password = {{ bacula_director_password }}         # Console password
  Messages = Daemon
}

JobDefs {
  Name = "DefaultJob"
  Type = Backup
  Level = Full
  Client = bacula-fd
  FileSet = "Full Set"
  Schedule = "WeeklyCycle"
  Storage = TapeDrive
  Messages = Standard
  Pool = Default
  Priority = 10
  Write Bootstrap = "/var/spool/bacula/%c.bsr"
}

Job {
  Name = "Sync Data"
  JobDefs = "DefaultJob"
  Type = Admin
  Priority = 5
  RunBeforeJob = "/usr/libexec/bacula/before_backup"
}

#
# Define the main nightly save backup job
#   By default, this job will back up to disk in /tmp
Job {
  Name = "BackupClient1"
  JobDefs = "DefaultJob"
  Priority = 10
  RunAfterJob  = "/usr/libexec/bacula/after_backup"
}

# Backup the catalog database (after the nightly save)
Job {
  Name = "BackupCatalog"
  JobDefs = "DefaultJob"
  Level = Full
  FileSet="Catalog"
  Schedule = "WeeklyCycleAfterBackup"
  # This creates an ASCII copy of the catalog
  # Arguments to make_catalog_backup.pl are:
  #  make_catalog_backup.pl <catalog-name>
  RunBeforeJob = "/usr/libexec/bacula/make_catalog_backup.pl MyCatalog"
  # This deletes the copy of the catalog
  RunAfterJob  = "/usr/libexec/bacula/delete_catalog_backup"
  Priority = 11                   # run after main backup
}

JobDefs {
  Name = "DefaultFileJob"
  Type = Backup
  Level = Full
  Client = bacula-fd2-encrypted
  FileSet = "Full Set without Nexus"
  Schedule = "WeeklyCycleToFile"
  Storage = FileStorage
  Messages = Standard
  Pool = FilePool
  Priority = 10
  Write Bootstrap = "/var/spool/bacula/%c.bsr"
  Enabled = no
}

Job {
  Name = "BackupClient1ToFile"
  JobDefs = "DefaultJob"
  Priority = 10
  RunAfterJob  = "/usr/libexec/bacula/after_backup_sync"
}

Job {
  Name = "BackupCatalogToFile"
  JobDefs = "DefaultFileJob"
  Client = bacula-fd
  FileSet="Catalog"
  RunBeforeJob = "/usr/libexec/bacula/make_catalog_backup.pl MyCatalog"
  RunAfterJob  = "/usr/libexec/bacula/after_backup_sync"
  Priority = 15                   # run after main backup
}

Job {
  Name = "AdminInfo"
  Client = bacula-fd
  FileSet="Catalog"
  RunBeforeJob = "ls -al --color=always /etc/bacula"
  Messages = "Standard"
  Storage = FileStorage
  Pool = FilePool
  Type = Admin
  Level = Full
}

#
# Standard Restore template, to be changed by Console program
#  Only one such job is needed for all Jobs/Clients/Storage ...
#
Job {
  Name = "RestoreFiles"
  Type = Restore
  Client=bacula-fd
  FileSet="Full Set"
  Storage = FileStorage
  Pool = Default
  Messages = Standard
  Where = /tmp/bacula-restores
}


# List of files to be backed up
FileSet {
  Name = "Full Set"
  Include {
    Options {
      signature = MD5
    }
#
#  Put your list of files here, preceded by 'File =', one per line
#    or include an external list with:
#
#    File = <file-name
#
#  Note: / backs up everything on the root partition.
#    if you have other partitions such as /usr or /home
#    you will probably want to add them too.
#
#  By default this is defined to point to the Bacula binary
#    directory to give a reasonable FileSet to backup to
#    disk storage during initial testing.
#
    File = /tmp/docker
  }

#
# If you backup the root directory, the following two excluded
#   files can be useful
#
  Exclude {
    File = /tmp/docker/NEXUS3/blobs/archive
    File = /var/spool/bacula
    File = /tmp
    File = /proc
    File = /tmp
    File = /.journal
    File = /.fsck
  }
}

# List of files to be backed up
FileSet {
  Name = "Full Set without Nexus"
  Include {
    Options {
      signature = MD5
    }
    File = /tmp/docker
  }
  Exclude {
    File = /tmp/docker/NEXUS3
  }
}

#
# When to do the backups, full backup on first sunday of the month,
#  differential (i.e. incremental since full) every other sunday,
#  and incremental backups other days
Schedule {
  Name = "WeeklyCycle"
  #Run = Level=Full Pool=Monthly 1st fri at 23:05
  Run = Level=Full Pool=Default 1st fri at 23:05
  #Run = Level=Full Pool=Weekly 2nd-5th fri at 23:05
  Run = Level=Full Pool=Default 2nd-5th fri at 23:05
  Run = Level=Full Pool=Default mon-thu at 23:05
}

# This schedule does the catalog. It starts after the WeeklyCycle
Schedule {
  Name = "WeeklyCycleAfterBackup"
  #Run = Level=Full Pool=Monthly 1st fri at 23:10
  Run = Level=Full Pool=Default 1st fri at 23:10
  #Run = Level=Full Pool=Weekly 2nd-5th fri at 23:10
  Run = Level=Full Pool=Default 2nd-5th fri at 23:10
  Run = Level=Full Pool=Default mon-thu at 23:10
}

Schedule {
  Name = "WeeklyCycleToFile"
  Run = Level=Full Pool=FilePool mon-fri at 23:05
}

# This is the backup of the catalog
FileSet {
  Name = "Catalog"
  Include {
    Options {
      signature = MD5
    }
    File = "/var/spool/bacula/bacula.sql"
  }
}

# Client (File Services) to backup
Client {
  Name = bacula-fd
  Address = {{ bacula_client_address }}
  FDPort = 9102
  Catalog = MyCatalog
  Password = {{ bacula_director_password }}          # password for FileDaemon
  File Retention = 30 days            # 30 days
  Job Retention = 6 months            # six months
  AutoPrune = yes                     # Prune expired Jobs/Files
}


# Client (File Services) to backup
Client {
  Name = bacula-fd2-encrypted
  Address = {{ bacula_encrypted_address }}
  FDPort = {{ bacula_encrypted_port }}
  Catalog = MyCatalog
  Password = {{ bacula_director_password }}         # password for FileDaemon 2
  File Retention = 30 days            # 30 days
  Job Retention = 6 months            # six months
  AutoPrune = yes                     # Prune expired Jobs/Files
}


# Definition of file storage device
Storage {
  Name = FileStorage
# Do not use "localhost" here
  Address = {{ bacula_client_address }}                # N.B. Use a fully qualified name here
  SDPort = 9103
  Password = {{ bacula_director_password }}
  Device = FileStorage
  Media Type = file
}

# Definition of tape storage device
Storage {
  Name = TapeDrive
# Do not use "localhost" here
  Address = {{ bacula_client_address }}                # N.B. Use a fully qualified name here
  SDPort = 9103
  Password = {{ bacula_director_password }}
  Device = QuantumTape
  Media Type = tape
}

# Generic catalog service
Catalog {
  Name = MyCatalog
# Uncomment the following line if you want the dbi driver
# dbdriver = "dbi:postgresql"; dbaddress = 127.0.0.1; dbport =
  dbname = "bacula"; dbuser = "bacula"; dbpassword = "{{ mariadb_bacula_password }}"
}

# Reasonable message delivery -- send most everything to email address
#  and to the console
Messages {
  Name = Standard
#
# NOTE! If you send to two email or more email addresses, you will need
#  to replace the %r in the from field (-f part) with a single valid
#  email address in both the mailcommand and the operatorcommand.
#  What this does is, it sets the email address that emails would display
#  in the FROM field, which is by default the same email as they're being
#  sent to.  However, if you send email to more than one address, then
#  you'll have to set the FROM address manually, to a single address.
#  for example, a 'no-reply@mydomain.com', is better since that tends to
#  tell (most) people that its coming from an automated source.

  mailcommand = "/usr/libexec/bacula/bacula-send-email -v -s '%e: %n %l %i' %r"
  operatorcommand = "/usr/libexec/bacula/bacula-send-email -v -s 'HELP: Intervention needed for %n %i' %r"

  mail = lenexa.devops@novatechweb.com = all, !skipped
  operator = lenexa.devops@novatechweb.com = mount
  console = all, !skipped, !saved
#
# WARNING! the following will create a file that you must cycle from
#          time to time as it will grow indefinitely. However, it will
#          also keep all your messages if they scroll off the console.
#
  append = "/var/log/bacula/bacula.log" = all, !skipped
  catalog = all
}


#
# Message delivery for daemon messages (no job).
Messages {
  Name = Daemon
  mailcommand = "/usr/libexec/bacula/bacula-send-email -v -s 'Bacula daemon message' %r"
  mail = lenexa.devops@novatechweb.com = all, !skipped
  console = all, !skipped, !saved
  append = "/var/log/bacula/bacula.log" = all, !skipped
}

# Default pool definition
Pool {
  Name = Default
  Pool Type = Backup
  Recycle = yes                       # Bacula can automatically recycle Volumes
  AutoPrune = yes                     # Prune expired volumes
  Volume Retention = 30 days          # 30 calendar days of Mon-Thu backups
  #Use Volume Once = yes
  Maximum Volume Jobs = 2
  Recycle Current Volume = yes
}

# Default pool definition
Pool {
  Name = Weekly
  Pool Type = Backup
  Recycle = yes                       # Bacula can automatically recycle Volumes
  AutoPrune = yes                     # Prune expired volumes
  Volume Retention = 6w               # 6 calendar weeks of Fri backups
  #Use Volume Once = yes
  Maximum Volume Jobs = 2
  Recycle Current Volume = yes
}

# Default pool definition
Pool {
  Name = Monthly
  Pool Type = Backup
  Recycle = yes                       # Bacula can automatically recycle Volumes
  AutoPrune = yes                     # Prune expired volumes
  Volume Retention = 6m               # 6 calendar months of 1st Fri backups
  #Use Volume Once = yes
  Maximum Volume Jobs = 2
  Recycle Current Volume = yes
}

# Scratch pool definition
Pool {
  Name = Scratch
  Pool Type = Backup
}

Pool {
  Name = FilePool
  Pool Type = Backup
  Maximum Volume Jobs = 2
  Maximum Volumes = 31
  LabelFormat = "FilePool-${Day:p/2/0/r}"
  Volume Retention = 30d
  Recycle = yes
  Recycle Oldest Volume = yes
  Action On Purge = Truncate
}
#
# Restricted console used by tray-monitor to get the status of the director
#
Console {
  Name = bacula-mon
  Password = {{ bacula_monitor_password }}
  CommandACL = status, .status
}
