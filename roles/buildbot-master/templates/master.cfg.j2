# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

import git
import importlib
import novatech
import os
import os.path
import sys
from buildbot.plugins import schedulers, secrets, steps, util, worker
from twisted.python import log

os.environ['LONG_RUN_TIMEOUT'] = '14400'

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
c['workers'] = []
c['schedulers'] = []
c['builders'] = []
c['change_source'] = []

# Defines the TCP port to listen on for connections from workers.
# This must match the value configured into the buildworkers (with their
# --master option)
c['protocols'] = {
    "pb": {
        "port": os.getenv("BUILDBOT_WORKER_PORT", "tcp:9989")
    }
}

# STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['services'] = []

from buildbot.plugins import reporters
irc = reporters.IRC(host="172.16.64.3",
                    nick="orionbb",
                    channels=["#orion"])
c['services'].append(irc)

if os.getenv('BUILDBOT_SMTP_HOST'):
    mn = reporters.MailNotifier(
        fromaddr="buildbot@novatechweb.com",
        sendToInterestedUsers=True,
        extraRecipients=["andrew.cooper@novatechweb.com"],
        useTls=True,
        relayhost=os.getenv('BUILDBOT_SMTP_HOST'),
        smtpPort=int(os.getenv('BUILDBOT_SMTP_PORT')),
        smtpUser=os.getenv('BUILDBOT_SMTP_USER'),
        smtpPassword=os.getenv('BUILDBOT_SMTP_PASS')
    )
    c['services'].append(mn)

if os.getenv('GITLAB_TOKEN'):
    gl = reporters.GitLabStatusPush(
        os.getenv('GITLAB_TOKEN'),
        context=util.Interpolate("%(prop:buildername)s"),
        baseURL=os.getenv("GITLAB_URI"),
        verbose=True,
        debug=True
    )
    c['services'].append(gl)

if os.getenv('LDAP_URI'):
    userInfoProvider = util.LdapUserInfo(
        uri=os.getenv('LDAP_URI'),
        bindUser=os.getenv('LDAP_BIND_USER'),
        bindPw=os.getenv('LDAP_BIND_PW'),
        accountBase='ou=user,dc=novatech',
        groupBase='ou=group,dc=novatech',
        accountPattern='(&(objectClass=inetOrgPerson)(uid=%(username)s))',
        accountFullName='displayName',
        accountEmail='mail',
        groupMemberPattern='(&(objectClass=groupOfNames)(member=%(dn)s))',
        groupName='cn',
        accountExtraFields=['employeeType'],
    )

# WEB SERVER
c['www'] = {
    'port': int(os.getenv('BUILDBOT_WEB_PORT', 8010)),
    'plugins': {
        'waterfall_view': True,
        'console_view': True,
        'grid_view': True,
    },
}

if os.getenv('GITLAB_URI'):
    c['www']['auth'] = util.GitLabAuth(
        os.getenv('GITLAB_URI'),
        os.getenv('GITLAB_OAUTH_ID'),
        os.getenv('GITLAB_OAUTH_SECRET'),
        userInfoProvider=userInfoProvider
    )

    c['www']['authz'] = util.Authz(
        allowRules=[
            # admins can do anything,
            # defaultDeny=False: if user does not have the admin role, we continue parsing rules
            util.AnyEndpointMatcher(role="admins", defaultDeny=True),
        ],
        roleMatchers=[
            util.RolesFromUsername(
                roles=['admins'],
                usernames=[
                    "george.mccollister",
                    "joseph.lutz",
                    "andrew.cooper",
                ]),
        ],
    )

if os.getenv('GITLAB_WEBHOOK_SECRET'):
    c['www']['change_hook_dialects'] = {
        'gitlab': {
            'secret': os.getenv('GITLAB_WEBHOOK_SECRET')
        }
    }

# PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "NovaTech CI"
c['titleURL'] = "http://git.novatech-llc.com/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = os.getenv('BUILDBOT_WEB_URL', "http://localhost:%s/" % (c['www']['port']))

# DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': os.getenv('BUILDBOT_DATABASE', "sqlite://"),
}

# Extra Options
c['buildbotNetUsageData'] = 'basic'

c['codebaseGenerator'] = novatech.codebaseGenerator

workerConfigs = {{ buildbot_worker_configs | default([]) | to_json }}

for cfg in workerConfigs:
    # Setup local worker configuration repository

    if 'giturl' in cfg:
        log.msg("[%s] Init module repository" % (cfg['module']))
        repo = git.Repo.init(cfg['module'])

        if 'origin' in repo.remotes:
            log.msg("[%s] Update remote" % (cfg['module']))
            remote = repo.remotes['origin']
            remote.set_url(cfg['giturl'])
        else:
            log.msg("[%s] Create remote" % (cfg['module']))
            remote = repo.create_remote('origin', cfg['giturl'])
        log.msg("[%s] Fetch repository changes" % (cfg['module']))
        remote.fetch()

        if cfg['branch'] in repo.heads:
            # update branch
            log.msg("[%s] Update branch" % (cfg['module']))
            branch = repo.heads[cfg['branch']]
            branch.commit = remote.refs[cfg['branch']]
        else:
            # create branch
            log.msg("[%s] Create branch" % (cfg['module']))
            branch = repo.create_head(cfg['branch'], remote.refs[cfg['branch']])

        # Update working directory
        log.msg("[%s] Checkout branch" % (cfg['module']))
        branch.checkout(force=True)

    # Load worker configuration
    log.msg("[%s] Import module" % (cfg['module']))
    module_name = ".".join((cfg['module'], 'buildbot_ci'))
    if module_name in sys.modules:
        importlib.reload(sys.modules[module_name])
    else:
        importlib.import_module(module_name)
    module = sys.modules[module_name]

    # Copy worker configuration
    worker_config = module.WorkerConfig
    c['workers'].extend(worker_config['workers'])
    c['schedulers'].extend(worker_config['schedulers'])
    c['builders'].extend(worker_config['builders'])
    c['change_source'].extend(worker_config['change_source'])

c['workers'].append(worker.LocalWorker('master-worker'))

c['builders'].append(
    util.BuilderConfig(
        name='master-reconfigure',
        workernames=['master-worker'],
        factory=util.BuildFactory([steps.MasterShellCommand(
            name="Reconfigure",
            command=["/usr/bin/buildbot","reconfig","--quiet"],
            workdir="{{ buildbot_data_path }}",
        )])
    ))

c['schedulers'].append(
    schedulers.ForceScheduler(
        name='master-reconfigure',
        builderNames=['master-reconfigure'],
    ))

c['schedulers'].append(
    schedulers.Triggerable(
        name='trigger-reconfigure',
        builderNames=['master-reconfigure'],
    )
)
