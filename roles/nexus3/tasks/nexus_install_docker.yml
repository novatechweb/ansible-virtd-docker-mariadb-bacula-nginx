---

- name: Include Docker specific variables.
  include_vars: "configure-Docker.yml"

- name: Set detection method to fixed if we have a var
  set_fact:
    nexus_version_detected_from: fixed
  when: nexus_version | length > 0

- name: Get information on a currently running Nexus container
  docker_container_info:
    name: '{{ nexus_container_name }}'
  register: nexus_container

- name: Register current running version if any
  set_fact:
    nexus_version_running: >-
      {{
        nexus_container['container']['Config']['Labels']['release'] | default('0')
      }}
  when:
    - nexus_container.exists | default(false)

- name: No version given => Version detection
  block:

    - name: Register nexus_version from currently installed
      # Note: setting nexus_version here skips the next block task.
      set_fact:
        nexus_version: "{{ nexus_version_running }}"
        nexus_version_detected_from: installed
      when:
        - nexus_version_running is defined
        - not (nexus_upgrade | default(false) | bool)

    - name: Query Docker Hub for image tags
      uri:
        url: https://registry.hub.docker.com/v1/repositories/sonatype/nexus3/tags
        method: GET
        body_format: json
        return_content: yes
      register: nexus_latest_uri_call
      # No changes made, we only need the target uri. Safe for check mode and needed for next operations
      check_mode: no

    - name: Find latest nexus_version from docker image tags
      set_fact:
        nexus_latest_tag: "{{ item }}"
      when: nexus_latest_tag | default("1.0.0") is version(item, "lt")
      with_items: "{{ nexus_latest_uri_call | json_query('json[*].name') | reject('eq','latest') | list }}"

    - name: Register nexus_version from latest nexus tag
      set_fact:
        nexus_version: '{{ nexus_latest_tag }}'
        nexus_version_detected_from: latest

  when: nexus_version | length == 0

- name: Print info about detected version to use
  vars:
    version_info: |-
      Used version: {{ nexus_version }}
      Version detected from: {{ nexus_version_detected_from }}
      Upgrade allowed: {{ nexus_upgrade | default(false) | bool }}
      Current running version: {{ nexus_version_running | default('none') }}
  debug:
    msg: "{{ version_info.split('\n') }}"

- name: Create nexus data volume
  docker_volume:
    name: '{{ nexus_data_volume }}'
    state: present
  register: nexus_data_volume_info

- name: Register nexus data volume directory
  set_fact:
    nexus_data_dir: "{{ nexus_data_volume_info['volume']['Mountpoint'] }}"

- name: 'Check if data directory is empty (first-time install)'
  command: ls "{{ nexus_data_dir }}"
  register: nexus_data_dir_contents
  check_mode: no
  changed_when: false

- name: Get path to default settings
  set_fact:
    nexus_default_settings_file: "{{ nexus_data_dir }}/etc/org.sonatype.nexus.cfg"
  when: nexus_version is version_compare('3.1.0', '<')

- name: Get path to default settings
  set_fact:
    nexus_default_settings_file: "{{ nexus_data_dir }}/etc/nexus.properties"
  when: nexus_version is version_compare('3.1.0', '>=')

- name: Get application settings directories
  set_fact:
    nexus_app_dir_settings_dirs:
      - "{{ nexus_data_dir }}/etc"
  when: nexus_version is version_compare('3.1.0', '<')

- name: Get application settings directories
  set_fact:
    nexus_app_dir_settings_dirs:
      - "{{ nexus_data_dir }}"
      - "{{ nexus_data_dir }}/etc"
      - "{{ nexus_data_dir }}/etc/karaf"
      - "{{ nexus_data_dir }}/etc/jetty"
      - "{{ nexus_data_dir }}/etc/fabric"
      - "{{ nexus_data_dir }}/etc/logback"
      - "{{ nexus_data_dir }}/etc/scripts"
  when: nexus_version is version_compare('3.1.0', '>=')

- name: Get rest API endpoint (v < 3.8.0)
  set_fact:
    nexus_rest_api_endpoint: "service/siesta/rest/v1/script"
  when: nexus_version is version_compare('3.8.0', '<')

- name: Get rest API endpoint (v >= 3.8.0)
  set_fact:
    nexus_rest_api_endpoint: "service/rest/v1/script"
  when: nexus_version is version_compare('3.8.0', '>=')

- name: Get path to database restore dir (v < 3.11.0)
  set_fact:
    nexus_db_restore_dir: "{{ nexus_data_mountpoint }}/backup"
  when: nexus_version is version_compare('3.11.0', '<')

- name: Get path to database restore dir (v >= 3.11.0)
  set_fact:
    nexus_db_restore_dir: "{{ nexus_data_mountpoint }}/restore-from-backup"
  when: nexus_version is version_compare('3.11.0', '>=')

- name: Allow nexus to create first-time install configuration files in {{ nexus_data_dir }}
  file:
    path: "{{ item }}"
    state: "directory"
    owner: "{{ nexus_os_user }}"
    group: "{{ nexus_os_group }}"
    mode: "0755"
    recurse: false
  with_items: "{{ nexus_app_dir_settings_dirs }}"
  register: chown_config_first_time
  tags:
    # hard to run as a handler for time being
    - skip_ansible_lint

- name: Stop the admin wizard from running
  lineinfile:
    path: "{{ nexus_default_settings_file }}"
    regexp: "^nexus.onboarding.enabled=.*"
    line: "nexus.onboarding.enabled={{ nexus_onboarding_wizard }}"
    group: "{{ nexus_os_group }}"
    owner: "{{ nexus_os_user }}"
    state: present
    create: true
  when: nexus_version is version_compare('3.17.0', '>=')

- name: Create nexus backup volume
  docker_volume:
    name: '{{ nexus_backup_volume }}'
    state: present
  register: nexus_backup_volume_info

# Note: this one is mandatory until we move all our groovy scripts
# to REST API calls. Once this is done, we will move this to an
# optionnal setting defaulting to false as recommended by sonatype
- name: "Enable creating groovy scripts in nexus"
  lineinfile:
    path: "{{ nexus_default_settings_file }}"
    regexp: "^nexus.scripts.allowCreation=.*"
    line: "nexus.scripts.allowCreation=true"
    group: "{{ nexus_os_group }}"
    owner: "{{ nexus_os_user }}"
    state: present
    create: true
  when: nexus_version is version_compare('3.21.2', '>=')

- block:
    - name: "Deploy backup restore script"
      template:
        src: "nexus-docker-blob-restore.sh.j2"
        dest: "{{ nexus_script_dir }}/nexus-blob-restore.sh"
        mode: 0755
    - name: "Symlink backup restore script to /sbin"
      file:
        src: "{{ nexus_script_dir }}/nexus-blob-restore.sh"
        dest: "/sbin/nexus-blob-restore.sh"
        state: link
  when: nexus_backup_configure | bool

- name: Clean cache for upgrade process
  file:
    path: "{{ nexus_data_dir }}/clean_cache"
    state: touch
  when:
    - nexus_version is version( nexus_version_running | default('0'), '!=')
    - nexus_upgrade | default(False)
    - nexus_data_dir_contents.stdout | length > 0
  tags:
    # hard to run as a handler for time being
    - skip_ansible_lint

# - name: Set first_install fact
#   set_fact:
#     nexus_first_install: '{{ nexus_data_dir_contents.ansible_facts.docker_container.Output == "" }}'

- name: Start nexus container
  docker_container:
    comparisons: {'*': strict}
    name: '{{ nexus_container_name }}'
    hostname: '{{ nexus_public_hostname }}'
    image: '{{ nexus_image_tag }}'
    networks: '{{ nexus_networks }}'
    volumes: '{{ nexus_volumes }}'
    ports: '{{ nexus_port_args }}'
    purge_networks: true
    state: started
  register: nexus_container

- name: Wait for container to start
  uri:
    url: "{{ nexus_api_scheme }}://{{ nexus_api_hostname }}:{{ nexus_api_port }}\
      {{ nexus_api_context_path }}service/metrics/ping"
    force_basic_auth: yes
    method: GET
    password: "{{ nexus_admin_password }}"
    return_content: yes
    status_code: 200,401
    user: 'admin'
  register: nexus_ping
  retries: 20
  delay: 5
  until: not nexus_ping.failed

- name: Access scripts API endpoint with defined admin password
  uri:
    url: "{{ nexus_api_scheme }}://{{ nexus_api_hostname }}:{{ nexus_api_port }}\
      {{ nexus_api_context_path }}{{ nexus_rest_api_endpoint }}"
    method: 'HEAD'
    user: 'admin'
    password: "{{ nexus_admin_password }}"
    force_basic_auth: yes
    status_code: 200, 401
    validate_certs: "{{ nexus_api_validate_certs }}"
  register: nexus_api_head_with_defined_password
  check_mode: no

- name: Register defined admin password for next operations
  set_fact:
    current_nexus_admin_password: "{{ nexus_admin_password }}"
  when: nexus_api_head_with_defined_password.status == 200
  no_log: true

- name: Check if admin.password file exists
  stat:
    path: "{{ nexus_data_volume_info['volume']['Mountpoint'] }}/admin.password"
  register: admin_password_file

- name: Get generated admin password from file (nexus >= 3.17)
  when:
    - admin_password_file.stat.exists
    - nexus_api_head_with_defined_password.status == 401
    - nexus_version is version_compare('3.17.0', '>=')
  block:
    - name: Slurp content of remote generated password file
      slurp:
        src: "{{ nexus_data_volume_info['volume']['Mountpoint'] }}/admin.password"
      register: _slurpedpass

    - name: Set default password from slurped content
      set_fact:
        nexus_default_admin_password: "{{ _slurpedpass.content | b64decode }}"

- name: Access scripts API endpoint with default admin password
  uri:
    url: "{{ nexus_api_scheme }}://{{ nexus_api_hostname }}:{{ nexus_api_port }}\
      {{ nexus_api_context_path }}{{ nexus_rest_api_endpoint }}"
    method: 'HEAD'
    user: 'admin'
    password: "{{ nexus_default_admin_password }}"
    force_basic_auth: yes
    status_code: 200, 401
    validate_certs: "{{ nexus_api_validate_certs }}"
  register: nexus_api_head_with_default_password
  when: nexus_api_head_with_defined_password.status == 401

- name: Register default admin password for next operations
  set_fact:
    current_nexus_admin_password: "{{ nexus_default_admin_password }}"
  when: (nexus_api_head_with_default_password.status | default(false)) == 200

- name: Ensure current Nexus password is known
  fail:
    msg: >-
      Failed to determine current Nexus password
      (it is neither the default/generated nor the defined password).
      If you are trying to change nexus_admin_password after first
      install, please set `-e nexus_default_admin_password=oldPassword`
      on the ansible-playbook command line.
      See https://github.com/ansible-ThoTeam/nexus3-oss/blob/master/README.md#change-admin-password-after-first-install
  when: current_nexus_admin_password is not defined

- name: Wait for container to start
  uri:
    url: "{{ nexus_api_scheme }}://{{ nexus_api_hostname }}:{{ nexus_api_port }}\
      {{ nexus_api_context_path }}service/metrics/ping"
    force_basic_auth: yes
    method: GET
    password: "{{ current_nexus_admin_password }}"
    return_content: yes
    status_code: 200,204
    user: 'admin'
  register: nexus_ping
  retries: 20
  delay: 5
  until: nexus_ping.content == "pong\n"

- name: Set permissions on backup volume
  command:
    docker exec -u root {{nexus_container_name}} chmod 777 {{nexus_backup_mountpoint}}
  changed_when: false


- name: Declare new or changed groovy scripts in nexus
  include_tasks: declare_script_each.yml
  vars:
    item: "{{ filename | basename | replace('.groovy','') }}"
  loop: "{{ query('fileglob', 'groovy/*.groovy') }}"
  loop_control:
    loop_var: filename

- name: Change admin password if we are still using default
  block:
    - include_tasks: call_script.yml
      vars:
        script_name: update_admin_password
        args:
          new_password: "{{ nexus_admin_password }}"

    - name: Admin password changed
      set_fact:
        current_nexus_admin_password: "{{ nexus_admin_password }}"
      no_log: true

    # - name: Clear generated password file from install (nexus > 3.17)
    #   file:
    #     path: "{{ nexus_data_dir }}/admin.password"
    #     state: absent
    #   when: nexus_version is version_compare('3.17.0', '>=')

  when: (nexus_api_head_with_default_password.status | default(false)) == 200
