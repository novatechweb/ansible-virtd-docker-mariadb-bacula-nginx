#!/bin/sh
set -exo pipefail

# *****************************************************************************
# Restore TestRail database container
gzip --decompress --stdout '{{ postgres_restore_dir }}/{{ postgres_backup_db_file }}' \
| docker exec {{ postgres_name }} \
    psql \
        --username="{{ postgres_secret_superuser }}" \
        --dbname="{{ postgres_secret_database }}" \
        --file=-

{#
docker exec {{ postgres_name }} \
    pg_restore \
        --username="{{ postgres_secret_superuser }}" \
        --dbname="{{ postgres_secret_database }}" \
        --clean --if-exists\
        --create \
        --format=custom \
        --verbose \
        --single-transaction \
< '{{ postgres_restore_dir }}/custom-{{ postgres_backup_db_file }}'
#}

{#
docker exec {{ postgres_name }} \
    pg_restore \
        --username="{{ postgres_secret_superuser }}" \
        --dbname="{{ postgres_secret_database }}" \
        --clean --if-exists\
        --create \
        --format=tar \
        --verbose \
        --single-transaction \
< '{{ postgres_restore_dir }}/tar-{{ postgres_backup_db_file }}'
#}

# after restoring a backup, it is wise to run ANALYZE on each database so the
# query optimizer has useful statistics; see Section 24.1.3 and Section 24.1.6
# for more information. For more advice on how to load large amounts of data
# into PostgreSQL efficiently, refer to Section 14.4.
docker exec {{ postgres_name }} \
    psql \
        --username="{{ postgres_secret_superuser }}" \
        --dbname="{{ postgres_secret_database }}" \
        --command="ANALYZE;"
